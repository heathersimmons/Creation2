// Motion detector code modified from Learning Processing Example 16-13, Daniel Shiffman
//playSoundClip function, autostart, full screen, and text additions are my own code

import processing.video.*;//import Processing's video library

Capture video;//declare live video capture object - i.e., the built-in webcam on my MacBook Pro

PImage prevFrame;//declare previous frame as an image object

int frame = 30;//variable to set frame rate

float threshold = 20;//set threshold for how different a pixel must appear in order to be considered moving

PFont font;//create font object of class PFont

void setup() {
 
  size(640,480);//create window
  
  font = loadFont("NanumBrush-48.vlw");//construct new artsy font and load into variable "font"
  textFont(font);//make artsy font active
  
  print("Frame rate is ");//display frame rate for diagnostic purposes
  println(frame);//display frame rate for diagnostic purposes
  
  video = new Capture(this, width, height, frame);//initialize video object using Capture constructor.  "This" simply means "run the video in THIS Processing program."  30 is frame rate.
  prevFrame = createImage(video.width,video.height,RGB);//take a snapshot image of each frame
  video.start();//start the webcam automatically
  
}

void draw() {

  if (video.available()) {//checks if a video (or live motion in this case) is available
    prevFrame.copy(video,0,0,video.width,video.height,0,0,video.width,video.height); // If so, save the previous frame so we can compare
    prevFrame.updatePixels();//update the pixels in the previous image
    video.read();//read the current video frame
    
  }

  loadPixels();//load the pixels for the current display
  video.loadPixels();//load the pixels for the live video
  prevFrame.loadPixels();//load the pixels for the previous video image
  
  
  for (int x = 0; x < video.width; x ++ ) {//Next two lines march through every pixel on the screen
    for (int y = 0; y < video.height; y ++ ) {
      
      int loc = x + y*video.width;            // Identifies pixel location
      color current = video.pixels[loc];      // identifies current color at that pixel location
      color previous = prevFrame.pixels[loc]; // Identifies previous color at that pixel location
      
      
      float r1 = red(current); float g1 = green(current); float b1 = blue(current);//current rgb values for each pixel
      float r2 = red(previous); float g2 = green(previous); float b2 = blue(previous);//previous rgb values for each pixel
      float diff = dist(r1,g1,b1,r2,g2,b2);//compares difference in rgb pixel values:  current vs. previous frame
      
     if (diff > threshold) {  //if color has changed, there is motion at that pixel.  Does it exceed the threshold?    
       
      color c = color(6,52,122);//Establish blueish gray color
      // Set pixels to appropriate color
      pixels[loc] = c;// If motion exceeds threshold, display blueish gray
        
      } else {
        pixels[loc] = color(200);// If not, display light gray
      }//end "pixel coloring" if statement
   
    }//end inner "for" statement
  }//end outer "for" statement which marches through each pixel and colors it depending on movement
  
  updatePixels();//apply coloring changes determined from for statement above, to the array of pixels
  
  playSoundClip(3,"Austin_Powers_groovy.wav","Austin_Powers_horny2.wav","Austin_Powers_very_randy.wav");//play one of 3 random Austin Powers sound clips, # and name of clips passed in as parameters
  
  fill(206,0,0);//set font color to reddish
  textSize(36);//set font size to 36
  text ("Press the mouse to hear feedback on your dancing", 40,40);//message to user
}//end draw function

boolean sketchFullScreen(){//play the sketch at full screen for projector purposes
  return true; 
}//end sketchFullScreen function

void playSoundClip (int numClips, String soundClip1, String soundClip2, String soundClip3){//this function plays one of three Austin Powers sound clips if the mouse is pressed
  
  if(mousePressed){
 
   int r = int(random(0,3));//pick a random number of 0, 1, or 2
   println(r);//show which random sound clip was picked - used for diagnostic purposes
   Movie[]soundClips = new Movie[numClips];//create a new array object of class Movie with the number of slots specified in the constructor
   String [] clipNames = {soundClip1, soundClip2,soundClip3};//declare, create, and assign an array populated with Austin Powers sound clip titles
   soundClips[r] = new Movie(this, clipNames[r]);//pick a random sound clip from the clipNames array and put it into the soundClips array
   soundClips[r].play();//play the randomly selected sound clip
 
 }//end "mousePressed" if statement
  
}//end playSoundClip function
